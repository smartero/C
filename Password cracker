//On most systems running Linux these days is a file called /etc/shadow, which contains usernames and password. Passwords are hashed. But the hash function is not always that strong. It's possible to guess password by typing all possible passwords and comparing hash to the original.
//That's how a programm for checking password can look like. Assumptions:
//-password length is not more than 5 characters
//-password has been hashed with Câ€™s DES-based (not MD5-based) crypt function
//-password is composed entirely of alphabetical characters (uppercase and/or lowercase).. 
//Specs: programm accepts a single command-line argument: a hashed password.

#define _XOPEN_SOURCE
#include <unistd.h>
#include <stdio.h>
#include <string.h>
char *crypt(const char *key, const char *salt);

int main(int argc, char* argv[])
{
    //check for 1 argument
    if (argc != 2)
    {
        printf("Error\n");
        return 1;
    }
    //define salt
    char salt[3];
    //define salt 1-st character
    salt[0] = argv[1][0];
    //define salt 2-nd character
    salt[1] = argv[1][1];
    //define salt 3-rd character
    salt[2] = '\0';
    char password[6];
    password[5] = '\0';
    //define one-letter password
    for (int a = 'A'; a <= 'z'; a++)
    {
        password[0] = a;
        if (strcmp(crypt(password, salt), argv[1]) == 0)
        {
            printf("%s\n", password);
            return 0;
        }
    }
    //define two-letters password
    for (int a = 'A'; a <= 'z'; a++)
    {
        password[0] = a;
        for (int b = 'A'; b <= 'z'; b++)
        {
            password[1] = b;
            if (strcmp(crypt(password, salt), argv[1]) == 0) //if it's the password
            {
                printf("%s\n", password);
                return 0;
            }
        }
    }
    //define three-letters password
    for (int a = 'A'; a <= 'z'; a++)
    {
        password[0] = a;
        for (int b = 'A'; b <= 'z'; b++)
        {
            password[1] = b;
            for (int c = 'A'; c <= 'z'; c++)
            {
                password[2] = c;
                if (strcmp(crypt(password, salt), argv[1]) == 0) //if it's the password
                {
                    printf("%s\n", password);
                    return 0;
                }
            }
        }
    }
    //define four-letters password
    for (int a = 'A'; a <= 'z'; a++)
    {
        password[0] = a;
        for (int b = 'A'; b <= 'z'; b++)
        {
            password[1] = b;
            for (int c = 'A'; c <= 'z'; c++)
            {
                password[2] = c;
                {
                    for (int d = 'A'; d <= 'z'; d++)
                    {
                        password[3] = d;
                        if (strcmp(crypt(password, salt), argv[1]) == 0) //if it's the password
                        {
                            printf("%s\n", password);
                            return 0;
                        }
                    }
                }
            }
        }
    }
    //define five-letters password
    for (int a = 'A'; a <= 'z'; a++)
    {
        password[0] = a;
        for (int b = 'A'; b <= 'z'; b++)
        {
            password[1] = b;
            for (int c = 'A'; c <= 'z'; c++)
            {
                password[2] = c;
                {
                    for (int d = 'A'; d <= 'z'; d++)
                    {
                        password[3] = d;
                        for (int e = 'A'; e <= 'z'; e++)
                        {
                            password[4] = e;
                            if (strcmp(crypt(password, salt), argv[1]) == 0) //if it's the password
                            {
                                printf("%s\n", password);
                                return 0;
                            }
                        }
                    }
                }
            }
        }
    }
}
